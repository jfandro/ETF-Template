
@{
    ViewBag.Title = "Positions";
}

    <!-- The style of my web site for widgets -->
    <link href="~/Content/mydataviz.css" rel="stylesheet" />

    <h1>Dataviz ... as a service</h1>

    <div class="well">
        <p>
            Pour cette expérience, vous devez disposer d'une clef privée valide de portefeuille. Vous pouvez reprendre celle que l'on vous propose
            dans le cadre du <a href="/Home/Allocations">reporting client</a> ou reprendre celle du portefeuille que vous avez peut-être créé
            lors de la <a href="/Home/Create">précédente expérience</a>.
            Pour analyser votre portefeuille, renseignez cette clef et activez le bouton <span class="btn btn-xs btn-primary">Analyser</span> dont l'action se résume en 2 étapes :
        </p>
        <ul>
            <li>
                La première étape interroge le serveur distant (via son API)
                pour charger les données historiques du portefeuille correspondant à la clef privée ci-dessous.
            </li>
            <li>La seconde étapge consiste à charger les <b>widgets</b> déclarés sur ce formulaire.</li>
        </ul>Les widgets sont des éléments managés via des javascripts déclarés en local (spécifique) ou sur le serveur (standard). Leurs
        nombre et leur fonction sont ajustables par le client.
    </div>

    <h2>Analyse de votre portefeuille</h2>

    <div class="form-group">
        <div class="input-group">
            <div class="input-group-addon">Clef privée</div>
            <input type="text" class="form-control portfolio-key" id="PositionCode" name="PositionCode" value="" placeholder="Indiquez la clef de votre portefeuille" />
        </div>
    </div>

    <p class="text-right">
        <button type="button" class="btn btn-primary btn-positions">Analyser</button>
    </p>


<div class="row">
    <div class="col-md-8 col-md-offset-2">
        <div class="row">
            <div class="col-sm-4">
                <div id="issuer-pie" class="portfolio-chart pie-chart" data-chart="pie" data-dimension="issuer">
                    <p class="header-chart">
                        <a class="reset" href="javascript:$b.reset('#issuer-pie');" style="display: none;"><i class="glyphicon glyphicon-star"></i></a>
                    </p>
                </div>
            </div>
            <div class="col-sm-4">
                <div id="rating-pie" class="portfolio-chart pie-chart" data-chart="pie" data-dimension="rating">
                    <p class="header-chart">
                        <a class="reset" href="javascript:$b.reset('#rating-pie');" style="display: none;"><i class="glyphicon glyphicon-star"></i></a>
                    </p>
                </div>
            </div>            
            <div class="col-sm-4">
                <div id="legal-pie" class="portfolio-chart pie-chart" data-chart="pie" data-dimension="legal">
                    <p class="header-chart">
                        <a class="reset" href="javascript:$b.reset('#legal-pie');" style="display: none;"><i class="glyphicon glyphicon-star"></i></a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">

    <div class="col-lg-4">
        <div class="row key-numbers-container">

            <div class="col-xs-12">
                <div class="key-number">
                    <div class="title"><i class="fa fa-line-chart"></i> Performance</div>
                    <div id="pf-counter" class="portfolio-chart number" data-chart="number" data-number="yld"></div>
                </div>
            </div>
            <div class="col-xs-12">
                <div class="key-number">
                    <div class="title"><i class="fa fa-bar-chart-o"></i> Résultats</div>
                    <div id="pnl-counter" class="portfolio-chart number" data-chart="number" data-number="pnl"></div>
                </div>
            </div>
            <div class="col-xs-12">
                <div class="key-number">
                    <div class="title"><i class="fa fa-random"></i> Volatilité</div>
                    <div id="std-counter" class="portfolio-chart number" data-chart="number" data-number="std"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-8">
        <div id="nav-chart" class="portfolio-chart line-chart" data-chart="lines" data-range-chart="#range-chart" style="height:300px;">
            <p class="header-chart text-center">
                <span class="reset small text-info" style="display: none;"><br />Période du <span class="filter"></span></span>
            </p>
        </div>
        <div id="range-chart" class="portfolio-chart range-chart" data-chart="bars" data-dimension="week" style="height:170px;">
            <a class="reset" href="javascript:$b.reset('#range-chart');$b.reset('#nav-chart');" style="display: none;"><i class="glyphicon glyphicon-star"></i></a>
        </div>
    </div>

</div>

<h2>Implémentation</h2>
<p>S'agissant des widgets de cette page, on retrouve la même technique d'intégration. Sur cette page, sont déclarés 
    deux autres librairies open source dc.js et crossfilter.js qui vont permettre la dépendance des widgets.</p>
<pre class="prettyprint"><xmp>
<!-- Latest version of d3 librairies -->
<script src="http://joueslacommeliliane.com/Scripts/d3/d3.js" type="text/javascript"></script>
<!-- Latest version of crossfilter librairies -->
<script src="http://joueslacommeliliane.com/Scripts/Crossfilter/crossfilter.js" type="text/javascript"></script>
<!-- Latest version of dc librairies -->
<script src="http://joueslacommeliliane.com/Scripts/dc/2.1.7/dc.js" type="text/javascript"></script>
<!-- Latest version of widgets portfolio charts -->
<script src="http://joueslacommeliliane.com/Scripts/portfolio.charts-1.4.js" type="text/javascript"></script>
</xmp></pre>

<p>Chaque élément pour widget a une propriété <span class="atn">data-chart</span> permettant de définir le type de widget qui sera déployé au sein de l'élément.</p>
<pre class="prettyprint"><xmp>
<div id="pnl-counter" class="portfolio-chart number" data-chart="number" data-number="pnl"></div>
<div id="rating-pie" class="portfolio-chart pie-chart" data-chart="pie" data-dimension="rating">
    ...
</div>
</xmp>
</pre>

<p>
    Chaque type de widget dispose d'une documentation propre permettant d'ajuster des paramètres concernant l'information analysée
    ou l'apparence. Par exemple, la propriété <span class="atn">data-number</span> est fixée sur std pour récupérer la volatilité de
    la période active.
</p>
<pre class="prettyprint"><xmp>
<div id="std-counter" class="portfolio-chart number" data-chart="number" data-number="std"></div>
</xmp>
</pre>

<p>
    Les widgets qui ont un comportement liés sont rassemblés par groupe d'élements. Vous pouvez définir autant de groupe que
    vous le souhaitez avec une seule instance. La méthode de regroupement
    que nous avons utilisé ici s'appuie sur la classe de style <span>"portfolio-chart"</span>:
</p>
<pre class="prettyprint"><xmp>
<div class="portfolio-chart"></div>
</xmp>
</pre>
    @section scripts {

    <!-- Latest version of d3 librairies -->
    <script src="http://joueslacommeliliane.com/Scripts/d3/d3.js" type="text/javascript"></script>
    <!-- Latest version of crossfilter librairies -->
    <script src="http://joueslacommeliliane.com/Scripts/Crossfilter/crossfilter.js" type="text/javascript"></script>
    <!-- Latest version of dc librairies -->
    <script src="http://joueslacommeliliane.com/Scripts/dc/2.1.7/dc.js" type="text/javascript"></script>
    <!-- Latest version of calculations on arrays -->
    <script src="http://joueslacommeliliane.com/Scripts/jquery-array-stats.js" type="text/javascript"></script>
    <!-- Latest version of widgets portfolio charts -->
    <script src="http://joueslacommeliliane.com/Scripts/portfolio.charts-1.4.js" type="text/javascript"></script>

        <script>

            $(document).ready(function () {

                // First, we create a new instance of portfolios controller to get data from server with LILI API
                $p = new LoyolApp.PortfolioController();

                // create a new instance of portfolioCharts in charge of widgets management
                $b = new portfolioCharts('');

                // link the declared widgets with common filters
                $b.group($('.portfolio-chart'));

                // When we click for dataviz of current portfolio
                $('.btn-positions').click(function () {
                    var code = $('#PositionCode').val();
                    // Get the detailed positions from the server in Json format
                    $p.get(code, 'positions', function (data) {
                        // Render all the grouped widgets
                        $b.loaddata(data);
                    });
                });
            });

        </script>
    }
